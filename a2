import cv2
import mediapipe as mp
import numpy as np

# ตั้งค่า Mediapipe สำหรับการตรวจจับท่าทาง
mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
pose = mp_pose.Pose()

# ตั้งค่ากล้อง
cap = cv2.VideoCapture(0)

# ตัวแปรสำหรับนับคะแนน
score = 0
sets = 0
pose_detected = False  # สถานะการตรวจจับท่าถูกต้อง
max_sets = 3  # จำนวนเซ็ตที่ต้องการให้ทำ
exercise_complete = False  # สถานะเมื่อทำครบทุกท่าแล้ว

# ฟังก์ชันคำนวณระยะห่างระหว่างจุดสองจุด
def calculate_distance(a, b):
    a = np.array(a)
    b = np.array(b)
    return np.linalg.norm(a - b)

def check_finger_position(finger, elbow):
    """ตรวจสอบว่าปลายนิ้วอยู่ต่ำกว่าข้อศอกหรือไม่"""
    return finger[1] > elbow[1]  # ถ้าค่าพิกัด y ของนิ้วมากกว่าของข้อศอก แปลว่านิ้วหักลง

while cap.isOpened() and not exercise_complete:
    ret, frame = cap.read()
    if not ret:
        break
    
    # แปลงภาพเป็น RGB
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    
    # ใช้ Mediapipe ตรวจจับท่าทาง
    result_pose = pose.process(frame_rgb)
    
    # ตรวจจับท่าทางจาก Mediapipe Pose
    if result_pose.pose_landmarks:
        landmarks = result_pose.pose_landmarks.landmark
        
        # วาดเส้นโครงร่างทั้งร่างกาย พร้อมปรับสีและความหนา
        mp_drawing.draw_landmarks(
            frame, 
            result_pose.pose_landmarks, 
            mp_pose.POSE_CONNECTIONS,
            landmark_drawing_spec=mp_drawing_styles.get_default_pose_landmarks_style()
        )
                
        # ดึงตำแหน่งข้อต่อจากกล้อง
        elbow_right = [landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW].x, landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW].y]
        finger_right = [landmarks[mp_pose.PoseLandmark.RIGHT_INDEX].x, landmarks[mp_pose.PoseLandmark.RIGHT_INDEX].y]  # ใช้พิกัดของนิ้วชี้แทน

        # ตรวจจับท่าทางเป้าหมาย: นิ้วต้องหักลงด้านล่าง
        if check_finger_position(finger_right, elbow_right):
            # แสดงข้อความพร้อมกรอบสีเขียวเมื่อท่าถูกต้อง
            cv2.putText(frame, "Finger bent down", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 3, cv2.LINE_AA)
            cv2.rectangle(frame, (30, 30), (400, 80), (0, 255, 0), 2)
            if not pose_detected:
                score += 1  # เพิ่มคะแนนเมื่อท่าถูกต้อง
                pose_detected = True  # ตั้งสถานะเป็นตรวจจับท่าถูกต้องแล้ว
        else:
            pose_detected = False  # รีเซ็ตสถานะเมื่อท่าไม่ถูกต้อง

        # แสดงจำนวนเซ็ตที่ทำได้พร้อมกรอบสีเหลือง
        if score >= 4:
            sets += 1
            score = 0  # รีเซ็ตคะแนนสำหรับเซ็ตถัดไป
            cv2.putText(frame, f"Set Completed! Sets: {sets}", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 3, cv2.LINE_AA)
            cv2.rectangle(frame, (30, 80), (400, 130), (0, 255, 255), 2)

        # แสดงจำนวนเซ็ตที่ทำได้ตลอดเวลา
        cv2.rectangle(frame, (40, 130), (260, 170), (50, 50, 200), -1)
        cv2.putText(frame, f"Sets: {sets}", (50, 150), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)

        # จบการออกกำลังกายเมื่อครบเซ็ตที่ต้องการ
        if sets >= max_sets:
            exercise_complete = True
            cv2.putText(frame, "Exercise Complete!", (50, 200), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 215, 255), 3, cv2.LINE_AA)

    # แสดงภาพที่ได้พร้อมเส้นโครงร่างทั้งร่างกาย
    cv2.imshow("Pose Detection", frame)

    # กด 'q' เพื่อออกจากโปรแกรม
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# ปล่อยกล้องและปิดหน้าต่างเมื่อจบโปรแกรม
cap.release()
cv2.destroyAllWindows()
